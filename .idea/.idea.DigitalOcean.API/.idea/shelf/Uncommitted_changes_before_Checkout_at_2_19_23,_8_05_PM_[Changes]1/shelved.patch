Index: DigitalOcean.API/DigitalOceanClient.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using DigitalOcean.API.Clients;\nusing DigitalOcean.API.Http;\nusing RestSharp;\n\nnamespace DigitalOcean.API {\n    public class DigitalOceanClient : IDigitalOceanClient {\n        public static readonly string DigitalOceanApiUrl = \"https://api.digitalocean.com/v2/\";\n        private readonly IConnection _connection;\n\n        public DigitalOceanClient(string token) {\n            var client = new RestClient(DigitalOceanApiUrl) {\n                UserAgent = \"digitalocean-api-dotnet\"\n            };\n            client.AddDefaultHeader(\"Authorization\", string.Format(\"Bearer {0}\", token));\n\n            _connection = new Connection(client);\n\n            Account = new AccountClient(_connection);\n            Actions = new ActionsClient(_connection);\n            CdnEndpoints = new CdnEndpointsClient(_connection);\n            Certificates = new CertificatesClient(_connection);\n            ContainerRegistry = new ContainerRegistryClient(_connection);\n            Databases = new DatabasesClient(_connection);\n            DomainRecords = new DomainRecordsClient(_connection);\n            Domains = new DomainsClient(_connection);\n            DropletActions = new DropletActionsClient(_connection);\n            Droplets = new DropletsClient(_connection);\n            Firewalls = new FirewallsClient(_connection);\n            FloatingIpActions = new FloatingIpActionsClient(_connection);\n            FloatingIps = new FloatingIpsClient(_connection);\n            ImageActions = new ImageActionsClient(_connection);\n            Images = new ImagesClient(_connection);\n            LoadBalancers = new LoadBalancerClient(_connection);\n            Projects = new ProjectsClient(_connection);\n            ProjectResources = new ProjectResourcesClient(_connection);\n            Keys = new KeysClient(_connection);\n            Kubernetes = new KubernetesClient(_connection);\n            Regions = new RegionsClient(_connection);\n            Sizes = new SizesClient(_connection);\n            Snapshots = new SnapshotsClient(_connection);\n            Tags = new TagsClient(_connection);\n            Volumes = new VolumesClient(_connection);\n            VolumeActions = new VolumeActionsClient(_connection);\n            BalanceClient = new BalanceClient(_connection);\n            Vpc = new VpcClient(_connection);\n            Apps = new AppsClient(_connection);\n        }\n\n        #region IDigitalOceanClient Members\n\n        public IRateLimit Rates {\n            get { return _connection.Rates; }\n        }\n\n        public IAccountClient Account { get; private set; }\n        public IActionsClient Actions { get; private set; }\n        public ICdnEndpointsClient CdnEndpoints { get; private set; }\n        public ICertificatesClient Certificates { get; private set; }\n        public IContainerRegistryClient ContainerRegistry { get; private set; }\n        public IDatabasesClient Databases { get; private set; }\n        public IDomainRecordsClient DomainRecords { get; private set; }\n        public IDomainsClient Domains { get; private set; }\n        public IDropletActionsClient DropletActions { get; private set; }\n        public IDropletsClient Droplets { get; private set; }\n        public IFirewallsClient Firewalls { get; private set; }\n        public IFloatingIpActionsClient FloatingIpActions { get; private set; }\n        public IFloatingIpsClient FloatingIps { get; private set; }\n        public IImageActionsClient ImageActions { get; private set; }\n        public IImagesClient Images { get; private set; }\n        public IKeysClient Keys { get; private set; }\n        public IKubernetesClient Kubernetes { get; private set; }\n        public ILoadBalancerClient LoadBalancers { get; private set; }\n        public IProjectsClient Projects { get; private set; }\n        public IProjectResourcesClient ProjectResources { get; private set; }\n        public IRegionsClient Regions { get; private set; }\n        public ISizesClient Sizes { get; private set; }\n        public ISnapshotsClient Snapshots { get; private set; }\n        public ITagsClient Tags { get; private set; }\n        public IVolumesClient Volumes { get; private set; }\n        public IVolumeActionsClient VolumeActions { get; private set; }\n        public IBalanceClient BalanceClient { get; private set; }\n        public IVpcClient Vpc { get; private set; }\n        public IAppsClient Apps { get; private set; }\n\n        #endregion\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DigitalOcean.API/DigitalOceanClient.cs b/DigitalOcean.API/DigitalOceanClient.cs
--- a/DigitalOcean.API/DigitalOceanClient.cs	
+++ b/DigitalOcean.API/DigitalOceanClient.cs	
@@ -4,11 +4,11 @@
 
 namespace DigitalOcean.API {
     public class DigitalOceanClient : IDigitalOceanClient {
-        public static readonly string DigitalOceanApiUrl = "https://api.digitalocean.com/v2/";
+        public static readonly string DIGITAL_OCEAN_API_URL = "https://api.digitalocean.com/v2/";
         private readonly IConnection _connection;
 
         public DigitalOceanClient(string token) {
-            var client = new RestClient(DigitalOceanApiUrl) {
+            var client = new RestClient(DIGITAL_OCEAN_API_URL) {
                 UserAgent = "digitalocean-api-dotnet"
             };
             client.AddDefaultHeader("Authorization", string.Format("Bearer {0}", token));
Index: DigitalOcean.API/Http/Connection.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Threading.Tasks;\nusing DigitalOcean.API.Extensions;\nusing DigitalOcean.API.Helpers;\nusing DigitalOcean.API.Models.Responses;\nusing RestSharp;\nusing RestSharp.Serialization.Json;\n\nnamespace DigitalOcean.API.Http {\n    public class Connection : IConnection {\n        public Connection(IRestClient client) {\n            Client = client;\n        }\n\n        #region IConnection Members\n\n        public IRestClient Client { get; private set; }\n        public IRateLimit Rates { get; private set; }\n\n        public async Task<IRestResponse> ExecuteRaw(string endpoint, IList<Parameter> parameters,\n            object data = null, Method method = Method.GET) {\n            var request = BuildRequest(endpoint, parameters);\n            request.Method = method;\n\n            if (data != null && method != Method.GET) {\n                request.RequestFormat = DataFormat.Json;\n                request.JsonSerializer = new JsonNetSerializer();\n                request.AddBody(data);\n            }\n\n            return await Client.ExecuteTaskRaw(request).ConfigureAwait(false);\n        }\n\n        public async Task<T> ExecuteRequest<T>(string endpoint, IList<Parameter> parameters,\n            object data = null, string expectedRoot = null, Method method = Method.GET)\n            where T : new() {\n            var request = BuildRequest(endpoint, parameters);\n            request.RootElement = expectedRoot;\n            request.Method = method;\n\n            if (data != null && method != Method.GET) {\n                request.RequestFormat = DataFormat.Json;\n                request.JsonSerializer = new JsonNetSerializer();\n                request.AddBody(data);\n            }\n\n            return await Client.ExecuteTask<T>(request).ConfigureAwait(false);\n        }\n\n        public async Task<IReadOnlyList<T>> GetPaginated<T>(string endpoint, IList<Parameter> parameters,\n            string expectedRoot = null) where T : new() {\n            var first = await ExecuteRaw(endpoint, parameters).ConfigureAwait(false);\n\n            // get page information\n            var deserialize = new JsonDeserializer {\n                RootElement = \"links\",\n                DateFormat = first.Request.DateFormat\n            };\n            var page = deserialize.Deserialize<Pagination>(first);\n\n            // get initial data\n            deserialize.RootElement = expectedRoot;\n            var data = deserialize.Deserialize<List<T>>(first);\n\n            // loop until we are finished\n            var allItems = new List<T>(data);\n            while (page != null && page.Pages != null && !String.IsNullOrWhiteSpace(page.Pages.Next)) {\n                endpoint = page.Pages.Next.Replace(DigitalOceanClient.DigitalOceanApiUrl, \"\");\n                var iter = await ExecuteRaw(endpoint, null).ConfigureAwait(false);\n\n                deserialize.RootElement = expectedRoot;\n                allItems.AddRange(deserialize.Deserialize<List<T>>(iter));\n\n                deserialize.RootElement = \"links\";\n                page = deserialize.Deserialize<Pagination>(iter);\n            }\n            return new ReadOnlyCollection<T>(allItems);\n        }\n\n        #endregion\n\n        private IRestRequest BuildRequest(string endpoint, IEnumerable<Parameter> parameters) {\n            var request = new RestRequest(endpoint) {\n                OnBeforeDeserialization = r => { Rates = new RateLimit(r.Headers); }\n            };\n\n            if (parameters == null) {\n                return request;\n            }\n            foreach (var parameter in parameters) {\n                request.AddParameter(parameter);\n            }\n\n            return request;\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DigitalOcean.API/Http/Connection.cs b/DigitalOcean.API/Http/Connection.cs
--- a/DigitalOcean.API/Http/Connection.cs	
+++ b/DigitalOcean.API/Http/Connection.cs	
@@ -67,7 +67,7 @@
             // loop until we are finished
             var allItems = new List<T>(data);
             while (page != null && page.Pages != null && !String.IsNullOrWhiteSpace(page.Pages.Next)) {
-                endpoint = page.Pages.Next.Replace(DigitalOceanClient.DigitalOceanApiUrl, "");
+                endpoint = page.Pages.Next.Replace(DigitalOceanClient.DIGITAL_OCEAN_API_URL, "");
                 var iter = await ExecuteRaw(endpoint, null).ConfigureAwait(false);
 
                 deserialize.RootElement = expectedRoot;
